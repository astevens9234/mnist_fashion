root - INFO - 
 Using device: cuda 
 batch_size: 128 
 num_workers: 1 
 learning_rate: 0.001 
 epochs: 10 

root - INFO - 
 model: GoogLeNet(
  (net): Sequential(
    (0): Sequential(
      (0): LazyConv2d(0, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (1): ReLU()
      (2): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (1): Sequential(
      (0): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU()
      (2): LazyConv2d(0, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (2): Sequential(
      (0): Inception(
        (b1_1): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 96, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 16, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Inception(
        (b1_1): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 32, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 96, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (3): Sequential(
      (0): Inception(
        (b1_1): LazyConv2d(0, 192, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 96, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 208, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 16, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Inception(
        (b1_1): LazyConv2d(0, 160, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 112, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 224, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 24, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Inception(
        (b1_1): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 24, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): Inception(
        (b1_1): LazyConv2d(0, 112, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 144, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 32, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): Inception(
        (b1_1): LazyConv2d(0, 256, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 160, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 32, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (4): Sequential(
      (0): Inception(
        (b1_1): LazyConv2d(0, 256, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 160, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 32, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Inception(
        (b1_1): LazyConv2d(0, 384, kernel_size=(1, 1), stride=(1, 1))
        (b2_1): LazyConv2d(0, 192, kernel_size=(1, 1), stride=(1, 1))
        (b2_2): LazyConv2d(0, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (b3_1): LazyConv2d(0, 48, kernel_size=(1, 1), stride=(1, 1))
        (b3_2): LazyConv2d(0, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
        (b4_1): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (b4_2): LazyConv2d(0, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): AdaptiveMaxPool2d(output_size=(1, 1))
      (3): Flatten(start_dim=1, end_dim=-1)
    )
    (5): LazyLinear(in_features=0, out_features=10, bias=True)
  )
) 
 lossfx: CrossEntropyLoss() 
 optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0
) 

root - INFO - Epoch 1
-------------------------------
root - INFO - loss: 2.303981  [  128/60000]
root - INFO - loss: 1.284971  [12928/60000]
root - INFO - loss: 0.577097  [25728/60000]
root - INFO - loss: 0.556470  [38528/60000]
root - INFO - loss: 0.522092  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 82.3%, Avg loss: 0.473761 

root - INFO - Epoch 2
-------------------------------
root - INFO - loss: 0.453097  [  128/60000]
root - INFO - loss: 0.498214  [12928/60000]
root - INFO - loss: 0.425086  [25728/60000]
root - INFO - loss: 0.438849  [38528/60000]
root - INFO - loss: 0.406675  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 86.0%, Avg loss: 0.365631 

root - INFO - Epoch 3
-------------------------------
root - INFO - loss: 0.301478  [  128/60000]
root - INFO - loss: 0.397983  [12928/60000]
root - INFO - loss: 0.442206  [25728/60000]
root - INFO - loss: 0.279376  [38528/60000]
root - INFO - loss: 0.391782  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 87.3%, Avg loss: 0.350521 

root - INFO - Epoch 4
-------------------------------
root - INFO - loss: 0.302092  [  128/60000]
root - INFO - loss: 0.385435  [12928/60000]
root - INFO - loss: 0.293131  [25728/60000]
root - INFO - loss: 0.280879  [38528/60000]
root - INFO - loss: 0.331445  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 89.2%, Avg loss: 0.299174 

root - INFO - Epoch 5
-------------------------------
root - INFO - loss: 0.220247  [  128/60000]
root - INFO - loss: 0.326434  [12928/60000]
root - INFO - loss: 0.293033  [25728/60000]
root - INFO - loss: 0.177144  [38528/60000]
root - INFO - loss: 0.233673  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 88.8%, Avg loss: 0.312173 

root - INFO - Epoch 6
-------------------------------
root - INFO - loss: 0.255996  [  128/60000]
root - INFO - loss: 0.350990  [12928/60000]
root - INFO - loss: 0.284938  [25728/60000]
root - INFO - loss: 0.244340  [38528/60000]
root - INFO - loss: 0.351303  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 90.4%, Avg loss: 0.272297 

root - INFO - Epoch 7
-------------------------------
root - INFO - loss: 0.257482  [  128/60000]
root - INFO - loss: 0.155467  [12928/60000]
root - INFO - loss: 0.190784  [25728/60000]
root - INFO - loss: 0.187682  [38528/60000]
root - INFO - loss: 0.171190  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 90.3%, Avg loss: 0.267238 

root - INFO - Epoch 8
-------------------------------
root - INFO - loss: 0.238480  [  128/60000]
root - INFO - loss: 0.182960  [12928/60000]
root - INFO - loss: 0.236394  [25728/60000]
root - INFO - loss: 0.169006  [38528/60000]
root - INFO - loss: 0.196214  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 90.0%, Avg loss: 0.278572 

root - INFO - Epoch 9
-------------------------------
root - INFO - loss: 0.200523  [  128/60000]
root - INFO - loss: 0.169797  [12928/60000]
root - INFO - loss: 0.235735  [25728/60000]
root - INFO - loss: 0.239549  [38528/60000]
root - INFO - loss: 0.147568  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 90.4%, Avg loss: 0.271483 

root - INFO - Epoch 10
-------------------------------
root - INFO - loss: 0.171025  [  128/60000]
root - INFO - loss: 0.164480  [12928/60000]
root - INFO - loss: 0.170671  [25728/60000]
root - INFO - loss: 0.195826  [38528/60000]
root - INFO - loss: 0.150164  [51328/60000]
root - INFO - Test Error: 
 Accuracy: 90.4%, Avg loss: 0.276014 

root - INFO - Finished!
